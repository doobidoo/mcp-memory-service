{
  "permissions": {
    "allow": [
      "Bash(echo $HOME)",
      "Bash(python:*)",
      "Bash(timeout 10s python -m src.mcp_memory_service.server:*)",
      "Bash(uv:*)",
      "Bash(GTK_IM_MODULE=\"\" python -m src.mcp_memory_service.server --debug)",
      "Bash(cat:*)",
      "Bash(grep:*)",
      "WebFetch(domain:github.com)",
      "Bash(chmod:*)",
      "Bash(gh issue close:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(gh issue list:*)",
      "Bash(gh issue comment:*)",
      "WebFetch(domain:glama.ai)",
      "WebFetch(domain:alexgarcia.xyz)",
      "Bash(rg:*)",
      "Bash(/bin/bash -c \"git status\")",
      "Bash(ls:*)",
      "Bash(bash -c 'export PATH=\"\"/usr/bin:/bin:$PATH\"\" && git status')",
      "Bash(bash -l -c 'git status')",
      "Bash(pytest:*)",
      "Bash(docker build:*)",
      "Bash(git checkout:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(uv run:*)",
      "Bash(npx @modelcontextprotocol/inspector uv:*)",
      "Bash(git commit:*)",
      "Bash(echo:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(export MCP_MEMORY_STORAGE_BACKEND=sqlite_vec)",
      "Bash(./start_sqlite_vec.sh:*)",
      "Bash(timeout:*)",
      "Bash(./setup_claude_mcp.sh:*)",
      "Bash(git fetch:*)",
      "Bash(git rebase:*)",
      "Bash(rm:*)",
      "Bash(curl:*)",
      "Bash(start /B python:*)",
      "Bash(where uv)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(mkdir:*)",
      "Bash(git merge-base:*)",
      "Bash(git fetch:*)",
      "Bash(git rebase:*)",
      "Bash(claude mcp:*)",
      "Bash(powershell:*)",
      "Bash(setx:*)",
      "Bash(set MCP_MEMORY_STORAGE_BACKEND=sqlite_vec)",
      "Bash(set MCP_MEMORY_HTTP_AUTO_START=true)",
      "Bash(set MCP_HTTP_PORT=8000)",
      "Bash(cmd /c:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "Bash(git commit:*)",
      "Bash(memory:*)",
      "Bash(cp:*)",
      "mcp__memory-service__check_database_health",
      "mcp__memory-service__store_memory",
      "mcp__memory-service__retrieve_memory",
      "Bash(MCP_MEMORY_STORAGE_BACKEND=sqlite_vec timeout 10s uv run memory --debug)",
      "Bash(MCP_MEMORY_STORAGE_BACKEND=sqlite_vec timeout 10s python -m src.mcp_memory_service.server --debug)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(git tag:*)",
      "Bash(export MCP_CONSOLIDATION_ENABLED=true)",
      "Bash(export MCP_MDNS_ENABLED=true)",
      "Bash(export MCP_HTTPS_ENABLED=true)",
      "Bash(export MCP_MDNS_SERVICE_NAME=\"MCP Memory Service - Consolidated\")",
      "Bash(export MCP_HTTP_ENABLED=true)",
      "Bash(export:*)",
      "Bash(export MCP_HTTP_PORT=8000)",
      "Bash(export MCP_API_KEY=\"test-key-123\")",
      "Bash(sudo ufw:*)",
      "Bash(./install_service.sh:*)",
      "Bash(sudo systemctl status:*)",
      "Bash(git tag:*)",
      "Bash(avahi-browse:*)",
      "Bash(avahi-resolve-host-name:*)",
      "Bash(systemctl status:*)",
      "Bash(gh issue view:*)",
      "Bash(/home/hkr/.local/bin/uv run --no-sync python run_server.py)",
      "Bash(nmap:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(ssh-keygen:*)",
      "Bash(ssh-copy-id:*)",
      "Bash(git pull:*)",
      "mcp__code-context__search_code",
      "Bash(ssh:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(gh api:*)",
      "Bash(git stash:*)",
      "Bash(git log:*)",
      "Bash(git branch:*)",
      "Bash(sed:*)",
      "Bash(git remote add:*)",
      "Bash(gh auth:*)",
      "Bash(gh pr close:*)",
      "Bash(gh repo fork:*)",
      "WebSearch",
      "WebFetch(domain:hub.docker.com)",
      "mcp__terminator-mcp-agent__get_focused_window_tree",
      "Bash(gh repo view:*)",
      "WebFetch(domain:10.0.1.30)",
      "WebFetch(domain:api.github.com)",
      "Bash(git describe:*)",
      "Bash(node:*)",
      "mcp__cloudflare-bindings__search_cloudflare_documentation",
      "mcp__cloudflare-bindings__workers_list",
      "mcp__cloudflare-bindings__accounts_list",
      "Bash(/memory-store \"Started Cloudflare native integration project. Phase 1: Core backend implementation using Vectorize for vectors, D1 for metadata, optional R2 for large content. Architecture maintains full backward compatibility.\")",
      "Bash(/memory-store:*)",
      "Bash(wrangler:*)",
      "mcp__cloudflare-bindings__set_active_account",
      "mcp__cloudflare-bindings__r2_bucket_create",
      "Bash(MCP_MEMORY_STORAGE_BACKEND=cloudflare )",
      "Bash(CLOUDFLARE_VECTORIZE_INDEX=\"mcp-memory-index\" )",
      "WebFetch(domain:developers.cloudflare.com)",
      "Bash(MCP_MEMORY_STORAGE_BACKEND=cloudflare python test_cloudflare_backend.py)",
      "mcp__cloudflare-bindings__d1_databases_list",
      "Bash(unset:*)",
      "Bash(gh pr view:*)",
      "Bash(SESSION_SUMMARY=\"Git Workflow Documentation Session - Updated CLAUDE.md with comprehensive feature branch lifecycle and cleanup practices. Key accomplishments: 1) Added complete git workflow from feature development through post-merge cleanup, 2) Documented proper branch lifecycle management including rebase, PR workflow, and essential cleanup steps, 3) Added release management practices with semantic versioning, 4) Established best practices for repository maintenance. Session built on real-world experience from Cloudflare backend integration (v6.2.0 release). Context: Working in /home/hkr/Repositories/mcp-memory-service, main branch, documenting practices to prevent stale feature branches. Completed user request to integrate branch cleanup knowledge into project documentation.\")",
      "Bash(EARLIER_SESSION_SUMMARY=\"Claude Code Memory Awareness Session Documentation - Completed comprehensive documentation update to CLAUDE.md adding git branch lifecycle and cleanup practices. This session continued from previous work where user requested: ''''this is something we should remember in general and integrate in the claude.md'''' referring to branch cleanup after successful merge of feature/cloudflare-native-backend. Key activities: 1) Read existing CLAUDE.md structure, 2) Added new section ''''Feature Branch Lifecycle and Cleanup'''' with complete workflow from development to cleanup, 3) Documented post-merge cleanup procedures that are often forgotten, 4) Added release management practices, 5) Established best practices for maintaining clean repository. Context: This built on successful Cloudflare backend integration (v6.2.0) where we demonstrated the complete workflow. User specifically wanted to preserve this knowledge for future development cycles to prevent stale branch accumulation.\")",
      "Bash(bash:*)",
      "mcp__memory-service__search_by_tag"
    ],
    "deny": [],
    "additionalDirectories": [
      "/home/hkr/Repositories",
      "/home/hkr/.claude-code/hooks"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": []
}