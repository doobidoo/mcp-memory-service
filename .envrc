# Watch key files for auto-reload
watch_file pyproject.toml
watch_file .env

# Auto-detect Python environment manager
log_status "Loading MCP Memory Service environment..."

if [[ -f .venv/pyvenv.cfg ]]; then
  # pip/venv project (prioritized)
  log_status "Using pip/venv environment"
  source .venv/bin/activate
elif [[ -f poetry.lock ]] || [[ -f pyproject.toml ]] && grep -q "tool.poetry" pyproject.toml 2>/dev/null; then
  # Poetry project
  log_status "Using Poetry environment"
  layout_poetry() {
    VIRTUAL_ENV=$(poetry env info --path 2>/dev/null)
    if [[ -z $VIRTUAL_ENV ]]; then
      poetry install
      VIRTUAL_ENV=$(poetry env info --path)
    fi
    export VIRTUAL_ENV
    PATH_add "$VIRTUAL_ENV/bin"
  }
  layout_poetry
elif [[ -f requirements.txt ]] || [[ -f .venv/pyvenv.cfg ]]; then
  # pip/venv project
  log_status "Using pip/venv environment"
  if [[ ! -d .venv ]]; then
    python -m venv .venv
  fi
  source .venv/bin/activate
fi

log_status "Environment loaded successfully"