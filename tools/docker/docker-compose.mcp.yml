# Docker Compose configuration for MCP protocol mode
# For use with MCP clients (Claude Desktop, VS Code extension, etc.)
# For HTTP/API mode, use docker-compose.yml instead

services:
  mcp-memory-service:
    build:
      context: ../..
      dockerfile: tools/docker/Dockerfile
    env_file:
      - ./.env

    # Required for MCP protocol communication
    stdin_open: true
    tty: true

    volumes:
      # Single data directory for all storage
      - ./data:/app/data

    environment:
      # Mode selection
      - MCP_MODE=${MCP_MODE:-mcp}
      - MCP_API_KEY=${MCP_API_KEY}

      # Storage configuration
      - MCP_MEMORY_STORAGE_BACKEND=${MCP_MEMORY_STORAGE_BACKEND}
      - MCP_MEMORY_SQLITE_PATH=${MCP_MEMORY_SQLITE_PATH}
      - MCP_MEMORY_BACKUPS_PATH=${MCP_MEMORY_BACKUPS_PATH}
      # Use ONNX embeddings to avoid torch/HF downloads in MCP mode
      - MCP_MEMORY_USE_ONNX=${MCP_MEMORY_USE_ONNX}

      # Performance tuning
      - LOG_LEVEL=${LOG_LEVEL}
      - MAX_RESULTS_PER_QUERY=${MAX_RESULTS_PER_QUERY}
      - SIMILARITY_THRESHOLD=${SIMILARITY_THRESHOLD}
      # Network/service discovery & CORS
      - MCP_MDNS_ENABLED=${MCP_MDNS_ENABLED}
      - MCP_CORS_ORIGINS=${MCP_CORS_ORIGINS}
      - MCP_SSE_HEARTBEAT=${MCP_SSE_HEARTBEAT}

      # Python configuration
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app/src

    # Use the unified entrypoint
    entrypoint: ["/usr/local/bin/docker-entrypoint-unified.sh"]

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "sh", "-c", "ps aux | grep -v grep | grep -q 'mcp_memory_service.server'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
